using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleAppStreamWriterReader
{
    class Program
    {
        static void Main(string[] args)
        {

            /*
             Классы StreamWriter и StreamReader удобно использовать во всех случаях,
        когда нужно читать или записывать символьные данные (например, стро­ки). Оба типа 
        работают по умолчанию с символами Unicode, но кодировку можно изменить 
        предоставлением правильно сконфигурированной ссылки на объект System.Text.Encoding.
            Класс StreamReader унаследован от абстрактного класса TextReader, основ­ные методы 
            которого следующие:
            • Close () - закрывает объект и освобождает ресурсы.
            • Flush () - очищает все буферы объекта-писателя и записывает все буферизированные 
            данные на устройство, но объект при этом не за­ крывается.
            • NewLine - свойство, позволяющее задать константу перевода строки.
            В Windows используется \г\п.
            • Write () - позволяет записывать данные в текстовый поток без до­бавления константы 
            новой строки.
            • WriteLine () - записывает данные в текстовый поток с добавлением константы 
            новой строки.                     
             */
             
            //Рассмотрим пример записи в файл с использованием StreamWriter
            using (StreamWriter writer = File.CreateText("friends.txt"))
            {
                writer.WriteLine("Вася");
                writer.WriteLine("Ира");
                writer.WriteLine("Олег");
            }

            /*Для чтения информации из текстового файла используется StreamReader,который 
        унаследован от абстрактного класса TextReader, обладающего сле­дующими методами:
            • Реек () - возвращает следующий доступный символ, не изменяя текущей позиции 
            читателя. Если достигнут конец потока, возвращается -1.
            • Read () - читает данные из входного потока.
            • ReadLine () - читает строку символов из текущего потока. Если достиг­нут конец 
            потока, возвращается null.
            • ReadToEnd ( ) - читает все символы, начиная с текущей позиции и до кон­ца потока. 
            Прочитанные символы возвращаются в виде одной строки.*/
            //Пример:
            using (StreamReader readerl = File.OpenText("friends.txt"))
            {
                string s = null;
                while ((s = readerl.ReadLine()) != null)
                {
                    Console.WriteLine(s);
                }
            }
        }
    }
}
